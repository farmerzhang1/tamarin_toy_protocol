theory NeedhamSchroeder
begin
builtins: hashing, asymmetric-encryption

rule Register_pk:
    [ Fr(~ltkA) ]
    -->
    [ !Ltk($A, ~ltkA), !Pk($A, pk(~ltkA)), Out(pk(~ltkA)) ]

rule Reveal_ltk:
    [ !Ltk(A, ltkA) ]
    --[ RevLtk(A)]->
    [ Out(ltkA) ]

rule I_1:
    let m1 = aenc{'1', ~ni, $I}pkR // nonce i
    in
    [ Fr(~ni), !Pk($R, pkR) ]
    --[ OUT_I_1(m1)]->
    [ Out( m1 ), St_I_1($I, $R, ~ni)]

rule R_1:
    let m1 = aenc{'1', ni, I}pk(ltkR)
        m2 = aenc{'2', ni, ~nr/*, $R*/}pkI
    in
    [ !Ltk($R, ltkR), In( m1 ), !Pk(I, pkI), Fr(~nr)]
    --[ IN_R_1_ni( ni, m1 ), OUT_R_1( m2 ), Running(I, $R, <'init',ni,~nr>)]->
    [ Out( m2 ), St_R_1($R, I, ni, ~nr) ]

rule I_2:
    let m2 = aenc{'2', ni, nr/*, R*/}pk(ltkI)
        m3 = aenc{'3', nr}pkR
    in
    [ St_I_1(I, R, ni), !Ltk(I, ltkI), In( m2 ), !Pk(R, pkR) ]
    --[ IN_I_2_nr( nr, m2), Commit(I, R, <'init',ni,nr>), Running(R, I, <'resp',ni,nr>) ]->
    [ Out( m3 ), Secret(I,R,nr), Secret(I,R,ni) ]

rule R_2:
    [ St_R_1(R, I, ni, nr), !Ltk(R, ltkR), In( aenc{'3', nr}pk(ltkR) ) ]
    --[ Commit(R, I, <'resp',ni,nr>)]->
    [ Secret(R,I,nr), Secret(R,I,ni)]

rule Secrecy_claim:
    [ Secret(A, B, m) ] --[ Secret(A, B, m) ]-> []

lemma nonce_secrecy:
    /* It cannot be that */
    "not(
    Ex A B s #i.
    /* somebody claims to have setup a shared secret, */
    Secret(A, B, s) @ i
    /* but the adversary knows it */
    & (Ex #j. K(s) @ j)
    /* without having performed a long-term key reveal. */
    & not (Ex #r. RevLtk(A) @ r)
    & not (Ex #r. RevLtk(B) @ r)
    )"
/*
lemma types [sources]:
    " (All ni m1 #i.
    IN_R_1_ni( ni, m1) @ i
    ==>
    ( (Ex #j. KU(ni) @ j & j < i)
    | (Ex #j. OUT_I_1( m1 ) @ j)
    )
    )
    & (All nr m2 #i.
    IN_I_2_nr( nr, m2) @ i
    ==>
    ( (Ex #j. KU(nr) @ j & j < i)
    | (Ex #j. OUT_R_1( m2 ) @ j)
    ))
    "*/
end
